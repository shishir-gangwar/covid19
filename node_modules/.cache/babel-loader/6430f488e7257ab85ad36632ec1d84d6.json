{"ast":null,"code":"const months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec'\n};\nexport const formatDate = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\nexport const formatDateAbsolute = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\nexport const validateCTS = (data = []) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const dataTypes = ['dailyconfirmed', 'dailydeceased', 'dailyrecovered', 'totalconfirmed', 'totaldeceased', 'totalrecovered'];\n  return data.filter(d => dataTypes.every(dt => d[dt]) && d.date).filter(d => dataTypes.every(dt => Number(d[dt]) >= 0)).filter(d => {\n    const year = today.getFullYear();\n    return new Date(d.date + year) < today;\n  });\n};","map":{"version":3,"sources":["/Users/s0g03gv/Documents/I_love_Appy/covid19india-react/src/utils/common-functions.js"],"names":["months","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","today","Date","setHours","dataTypes","filter","d","every","dt","date","Number","getFullYear"],"mappings":"AAAA,MAAMA,MAAM,GAAG;AACb,QAAM,KADO;AAEb,QAAM,KAFO;AAGb,QAAM,KAHO;AAIb,QAAM,KAJO;AAKb,QAAM,KALO;AAMb,QAAM,KANO;AAOb,QAAM,KAPO;AAQb,QAAM,KARO;AASb,QAAM,KATO;AAUb,QAAM,KAVO;AAWb,QAAM,KAXO;AAYb,QAAM;AAZO,CAAf;AAeA,OAAO,MAAMC,UAAU,GAAIC,eAAD,IAAqB;AAC7C,QAAMC,GAAG,GAAGD,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAZ;AACA,QAAMC,KAAK,GAAGH,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAd;AACA,QAAME,IAAI,GAAGJ,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAAb;AACA,QAAMG,IAAI,GAAGL,eAAe,CAACE,KAAhB,CAAsB,EAAtB,CAAb;AACA,SAAQ,GAAEE,IAAK,IAAGD,KAAM,IAAGF,GAAI,IAAGI,IAAK,QAAvC;AACD,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAIN,eAAD,IAAqB;AACrD,QAAMC,GAAG,GAAGD,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAZ;AACA,QAAMC,KAAK,GAAGH,eAAe,CAACE,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAd;AACA,QAAMG,IAAI,GAAGL,eAAe,CAACE,KAAhB,CAAsB,EAAtB,CAAb;AACA,SAAQ,GAAED,GAAI,IAAGH,MAAM,CAACK,KAAD,CAAQ,KAAIE,IAAI,CAACH,KAAL,CAAW,CAAX,EAAc,CAAd,CAAiB,MAApD;AACD,CALM;AAOP,OAAO,MAAMK,WAAW,GAAG,CAACC,IAAI,GAAG,EAAR,KAAe;AACxC,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACA,QAAMC,SAAS,GAAG,CAChB,gBADgB,EAEhB,eAFgB,EAGhB,gBAHgB,EAIhB,gBAJgB,EAKhB,eALgB,EAMhB,gBANgB,CAAlB;AAQA,SAAOJ,IAAI,CACRK,MADI,CACIC,CAAD,IAAOF,SAAS,CAACG,KAAV,CAAiBC,EAAD,IAAQF,CAAC,CAACE,EAAD,CAAzB,KAAkCF,CAAC,CAACG,IAD9C,EAEJJ,MAFI,CAEIC,CAAD,IAAOF,SAAS,CAACG,KAAV,CAAiBC,EAAD,IAAQE,MAAM,CAACJ,CAAC,CAACE,EAAD,CAAF,CAAN,IAAiB,CAAzC,CAFV,EAGJH,MAHI,CAGIC,CAAD,IAAO;AACb,UAAMV,IAAI,GAAGK,KAAK,CAACU,WAAN,EAAb;AACA,WAAO,IAAIT,IAAJ,CAASI,CAAC,CAACG,IAAF,GAASb,IAAlB,IAA0BK,KAAjC;AACD,GANI,CAAP;AAOD,CAlBM","sourcesContent":["const months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec',\n};\n\nexport const formatDate = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\n\nexport const formatDateAbsolute = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nexport const validateCTS = (data = []) => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const dataTypes = [\n    'dailyconfirmed',\n    'dailydeceased',\n    'dailyrecovered',\n    'totalconfirmed',\n    'totaldeceased',\n    'totalrecovered',\n  ];\n  return data\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\n    .filter((d) => {\n      const year = today.getFullYear();\n      return new Date(d.date + year) < today;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}