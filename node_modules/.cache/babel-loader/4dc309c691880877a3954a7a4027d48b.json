{"ast":null,"code":"import { ticks, tickStep } from \"d3-array\";\nimport { interpolateNumber as reinterpolate } from \"d3-interpolate\";\nimport { default as continuous, copy, deinterpolateLinear as deinterpolate } from \"./continuous\";\nimport tickFormat from \"./tickFormat\";\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function (count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    return tickFormat(domain(), count, specifier);\n  };\n\n  scale.nice = function (count) {\n    var d = domain(),\n        i = d.length - 1,\n        n = count == null ? 10 : count,\n        start = d[0],\n        stop = d[i],\n        step = tickStep(start, stop, n);\n\n    if (step) {\n      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n      d[0] = Math.floor(start / step) * step;\n      d[i] = Math.ceil(stop / step) * step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\nexport default function linear() {\n  var scale = continuous(deinterpolate, reinterpolate);\n\n  scale.copy = function () {\n    return copy(scale, linear());\n  };\n\n  return linearish(scale);\n}","map":{"version":3,"sources":["/Users/s0g03gv/Documents/MOM/covid19india-react/node_modules/d3-svg-legend/node_modules/d3-scale/src/linear.js"],"names":["ticks","tickStep","interpolateNumber","reinterpolate","default","continuous","copy","deinterpolateLinear","deinterpolate","tickFormat","linearish","scale","domain","count","d","length","specifier","nice","i","n","start","stop","step","Math","floor","ceil","linear"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,UAA9B;AACA,SAAQC,iBAAiB,IAAIC,aAA7B,QAAiD,gBAAjD;AACA,SAAQC,OAAO,IAAIC,UAAnB,EAA+BC,IAA/B,EAAqCC,mBAAmB,IAAIC,aAA5D,QAAgF,cAAhF;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC/B,MAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;;AAEAD,EAAAA,KAAK,CAACX,KAAN,GAAc,UAASa,KAAT,EAAgB;AAC5B,QAAIC,CAAC,GAAGF,MAAM,EAAd;AACA,WAAOZ,KAAK,CAACc,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAACA,CAAC,CAACC,MAAF,GAAW,CAAZ,CAAR,EAAwBF,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAA7C,CAAZ;AACD,GAHD;;AAKAF,EAAAA,KAAK,CAACF,UAAN,GAAmB,UAASI,KAAT,EAAgBG,SAAhB,EAA2B;AAC5C,WAAOP,UAAU,CAACG,MAAM,EAAP,EAAWC,KAAX,EAAkBG,SAAlB,CAAjB;AACD,GAFD;;AAIAL,EAAAA,KAAK,CAACM,IAAN,GAAa,UAASJ,KAAT,EAAgB;AAC3B,QAAIC,CAAC,GAAGF,MAAM,EAAd;AAAA,QACIM,CAAC,GAAGJ,CAAC,CAACC,MAAF,GAAW,CADnB;AAAA,QAEII,CAAC,GAAGN,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAF7B;AAAA,QAGIO,KAAK,GAAGN,CAAC,CAAC,CAAD,CAHb;AAAA,QAIIO,IAAI,GAAGP,CAAC,CAACI,CAAD,CAJZ;AAAA,QAKII,IAAI,GAAGrB,QAAQ,CAACmB,KAAD,EAAQC,IAAR,EAAcF,CAAd,CALnB;;AAOA,QAAIG,IAAJ,EAAU;AACRA,MAAAA,IAAI,GAAGrB,QAAQ,CAACsB,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAGE,IAAnB,IAA2BA,IAA5B,EAAkCC,IAAI,CAACE,IAAL,CAAUJ,IAAI,GAAGC,IAAjB,IAAyBA,IAA3D,EAAiEH,CAAjE,CAAf;AACAL,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAOS,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAGE,IAAnB,IAA2BA,IAAlC;AACAR,MAAAA,CAAC,CAACI,CAAD,CAAD,GAAOK,IAAI,CAACE,IAAL,CAAUJ,IAAI,GAAGC,IAAjB,IAAyBA,IAAhC;AACAV,MAAAA,MAAM,CAACE,CAAD,CAAN;AACD;;AAED,WAAOH,KAAP;AACD,GAhBD;;AAkBA,SAAOA,KAAP;AACD;AAED,eAAe,SAASe,MAAT,GAAkB;AAC/B,MAAIf,KAAK,GAAGN,UAAU,CAACG,aAAD,EAAgBL,aAAhB,CAAtB;;AAEAQ,EAAAA,KAAK,CAACL,IAAN,GAAa,YAAW;AACtB,WAAOA,IAAI,CAACK,KAAD,EAAQe,MAAM,EAAd,CAAX;AACD,GAFD;;AAIA,SAAOhB,SAAS,CAACC,KAAD,CAAhB;AACD","sourcesContent":["import {ticks, tickStep} from \"d3-array\";\nimport {interpolateNumber as reinterpolate} from \"d3-interpolate\";\nimport {default as continuous, copy, deinterpolateLinear as deinterpolate} from \"./continuous\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return tickFormat(domain(), count, specifier);\n  };\n\n  scale.nice = function(count) {\n    var d = domain(),\n        i = d.length - 1,\n        n = count == null ? 10 : count,\n        start = d[0],\n        stop = d[i],\n        step = tickStep(start, stop, n);\n\n    if (step) {\n      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);\n      d[0] = Math.floor(start / step) * step;\n      d[i] = Math.ceil(stop / step) * step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(deinterpolate, reinterpolate);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  return linearish(scale);\n}\n"]},"metadata":{},"sourceType":"module"}