{"ast":null,"code":"var _jsxFileName = \"/Users/s0g03gv/Documents/MOM/covid19india-react/src/components/choropleth.js\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { legendColor } from 'd3-svg-legend';\nimport * as topojson from 'topojson';\nimport { MAP_TYPES } from '../constants';\nconst propertyFieldMap = {\n  country: 'st_nm',\n  state: 'district'\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  setHoveredRegion,\n  mapMeta,\n  changeMap,\n  selectedRegion\n}) {\n  const choroplethMap = useRef(null);\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\n  const ready = useCallback(geoData => {\n    d3.selectAll('svg#chart > *').remove();\n    const propertyField = propertyFieldMap[mapMeta.mapType];\n    const maxInterpolation = 0.8;\n    const svg = d3.select(choroplethMap.current);\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const handleMouseover = name => {\n      try {\n        setHoveredRegion(name, mapMeta);\n      } catch (err) {\n        console.log('err', err);\n      }\n    };\n\n    const topology = topojson.feature(geoData, geoData.objects[mapMeta.graphObjectName]);\n    const projection = d3.geoMercator();\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) projection.fitSize([width, height], topology);else projection.fitExtent([[90, 20], [width, height]], topology);\n    const path = d3.geoPath(projection);\n    let onceTouchedRegion = null;\n    svg.append('g').attr('class', 'states').selectAll('path').data(topology.features).enter().append('path').attr('class', 'path-region').attr('fill', function (d) {\n      const n = parseInt(mapData[d.properties[propertyField]]) || 0;\n      const color = n === 0 ? '#ffffff' : d3.interpolateReds(maxInterpolation * n / (statistic.maxConfirmed || 0.001));\n      return color;\n    }).attr('d', path).attr('pointer-events', 'all').on('mouseover', d => {\n      handleMouseover(d.properties[propertyField]);\n      const target = d3.event.target;\n      d3.select(target.parentNode.appendChild(target)).attr('class', 'map-hover');\n    }).on('mouseleave', d => {\n      const target = d3.event.target;\n      d3.select(target).attr('class', 'path-region map-default');\n      if (onceTouchedRegion === d) onceTouchedRegion = null;\n    }).on('touchstart', d => {\n      if (onceTouchedRegion === d) onceTouchedRegion = null;else onceTouchedRegion = d;\n    }).on('click', d => {\n      if (onceTouchedRegion) {\n        return;\n      }\n\n      if (mapMeta.mapType === MAP_TYPES.STATE) {\n        return;\n      }\n\n      changeMap(d.properties[propertyField], mapMeta.mapType);\n    }).style('cursor', 'pointer').append('title').text(function (d) {\n      const value = mapData[d.properties[propertyField]] || 0;\n      return Number(parseFloat(100 * (value / (statistic.total || 0.001))).toFixed(2)).toString() + '% from ' + toTitleCase(d.properties[propertyField]);\n    });\n    svg.append('path').attr('stroke', '#ff073a20').attr('fill', 'none').attr('stroke-width', 2).attr('d', path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName])));\n  }, [mapData, mapMeta, statistic.total, statistic.maxConfirmed, changeMap, setHoveredRegion]);\n\n  const toTitleCase = str => {\n    str = str.toLowerCase().split(' ');\n\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n\n    return str.join(' ');\n  };\n\n  const renderData = useCallback(() => {\n    const svg = d3.select(choroplethMap.current); // Colorbar\n\n    const maxInterpolation = 0.8;\n    const color = d3.scaleSequential(d3.interpolateReds).domain([0, statistic.maxConfirmed / maxInterpolation || 10]);\n    let cells = null;\n    let label = null;\n\n    label = ({\n      i,\n      genLength,\n      generatedLabels,\n      labelDelimiter\n    }) => {\n      if (i === genLength - 1) {\n        const n = Math.floor(generatedLabels[i]);\n        return `${n}+`;\n      } else {\n        const n1 = 1 + Math.floor(generatedLabels[i]);\n        const n2 = Math.floor(generatedLabels[i + 1]);\n        return `${n1} - ${n2}`;\n      }\n    };\n\n    const numCells = 6;\n    const delta = Math.floor((statistic.maxConfirmed < numCells ? numCells : statistic.maxConfirmed) / (numCells - 1));\n    cells = Array.from(Array(numCells).keys()).map(i => i * delta);\n    svg.append('g').attr('class', 'legendLinear').attr('transform', 'translate(1, 335)');\n    const legendLinear = legendColor().shapeWidth(36).shapeHeight(10).cells(cells).titleWidth(3).labels(label).title('Confirmed Cases').orient('vertical').scale(color);\n    svg.select('.legendLinear').call(legendLinear).selectAll('text').style('font-size', '10px');\n  }, [statistic.maxConfirmed]);\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        renderData();\n        setSvgRenderCount(prevCount => prevCount + 1);\n      }\n    })();\n  }, [mapMeta.geoDataFile, statistic, renderData, ready]);\n\n  const highlightRegionInMap = name => {\n    const paths = d3.selectAll('.path-region');\n    paths.classed('map-hover', (d, i, nodes) => {\n      const propertyField = 'district' in d.properties ? propertyFieldMap['state'] : propertyFieldMap['country'];\n\n      if (name === d.properties[propertyField]) {\n        nodes[i].parentNode.appendChild(nodes[i]);\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  useEffect(() => {\n    highlightRegionInMap(selectedRegion);\n  }, [svgRenderCount, selectedRegion]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"svg-parent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    id: \"chart\",\n    width: \"480\",\n    height: \"450\",\n    viewBox: \"0 0 480 450\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: choroplethMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ChoroplethMap;","map":{"version":3,"sources":["/Users/s0g03gv/Documents/MOM/covid19india-react/src/components/choropleth.js"],"names":["React","useCallback","useEffect","useRef","useState","d3","legendColor","topojson","MAP_TYPES","propertyFieldMap","country","state","ChoroplethMap","statistic","mapData","setHoveredRegion","mapMeta","changeMap","selectedRegion","choroplethMap","svgRenderCount","setSvgRenderCount","ready","geoData","selectAll","remove","propertyField","mapType","maxInterpolation","svg","select","current","width","attr","height","handleMouseover","name","err","console","log","topology","feature","objects","graphObjectName","projection","geoMercator","COUNTRY","fitSize","fitExtent","path","geoPath","onceTouchedRegion","append","data","features","enter","d","n","parseInt","properties","color","interpolateReds","maxConfirmed","on","target","event","parentNode","appendChild","STATE","style","text","value","Number","parseFloat","total","toFixed","toString","toTitleCase","mesh","str","toLowerCase","split","i","length","charAt","toUpperCase","slice","join","renderData","scaleSequential","domain","cells","label","genLength","generatedLabels","labelDelimiter","Math","floor","n1","n2","numCells","delta","Array","from","keys","map","legendLinear","shapeWidth","shapeHeight","titleWidth","labels","title","orient","scale","call","json","geoDataFile","prevCount","highlightRegionInMap","paths","classed","nodes"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\nimport * as d3 from 'd3';\nimport {legendColor} from 'd3-svg-legend';\nimport * as topojson from 'topojson';\nimport {MAP_TYPES} from '../constants';\n\nconst propertyFieldMap = {\n  country: 'st_nm',\n  state: 'district',\n};\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  setHoveredRegion,\n  mapMeta,\n  changeMap,\n  selectedRegion,\n}) {\n  const choroplethMap = useRef(null);\n  const [svgRenderCount, setSvgRenderCount] = useState(0);\n\n  const ready = useCallback(\n    (geoData) => {\n      d3.selectAll('svg#chart > *').remove();\n      const propertyField = propertyFieldMap[mapMeta.mapType];\n      const maxInterpolation = 0.8;\n      const svg = d3.select(choroplethMap.current);\n      const width = +svg.attr('width');\n      const height = +svg.attr('height');\n\n      const handleMouseover = (name) => {\n        try {\n          setHoveredRegion(name, mapMeta);\n        } catch (err) {\n          console.log('err', err);\n        }\n      };\n\n      const topology = topojson.feature(\n        geoData,\n        geoData.objects[mapMeta.graphObjectName]\n      );\n\n      const projection = d3.geoMercator();\n\n      if (mapMeta.mapType === MAP_TYPES.COUNTRY)\n        projection.fitSize([width, height], topology);\n      else\n        projection.fitExtent(\n          [\n            [90, 20],\n            [width, height],\n          ],\n          topology\n        );\n\n      const path = d3.geoPath(projection);\n\n      let onceTouchedRegion = null;\n\n      svg\n        .append('g')\n        .attr('class', 'states')\n        .selectAll('path')\n        .data(topology.features)\n        .enter()\n        .append('path')\n        .attr('class', 'path-region')\n        .attr('fill', function (d) {\n          const n = parseInt(mapData[d.properties[propertyField]]) || 0;\n          const color =\n            n === 0\n              ? '#ffffff'\n              : d3.interpolateReds(\n                  (maxInterpolation * n) / (statistic.maxConfirmed || 0.001)\n                );\n          return color;\n        })\n        .attr('d', path)\n        .attr('pointer-events', 'all')\n        .on('mouseover', (d) => {\n          handleMouseover(d.properties[propertyField]);\n          const target = d3.event.target;\n          d3.select(target.parentNode.appendChild(target)).attr(\n            'class',\n            'map-hover'\n          );\n        })\n        .on('mouseleave', (d) => {\n          const target = d3.event.target;\n          d3.select(target).attr('class', 'path-region map-default');\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n        })\n        .on('touchstart', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n          else onceTouchedRegion = d;\n        })\n        .on('click', (d) => {\n          if (onceTouchedRegion) {\n            return;\n          }\n          if (mapMeta.mapType === MAP_TYPES.STATE) {\n            return;\n          }\n          changeMap(d.properties[propertyField], mapMeta.mapType);\n        })\n        .style('cursor', 'pointer')\n        .append('title')\n        .text(function (d) {\n          const value = mapData[d.properties[propertyField]] || 0;\n          return (\n            Number(\n              parseFloat(100 * (value / (statistic.total || 0.001))).toFixed(2)\n            ).toString() +\n            '% from ' +\n            toTitleCase(d.properties[propertyField])\n          );\n        });\n\n      svg\n        .append('path')\n        .attr('stroke', '#ff073a20')\n        .attr('fill', 'none')\n        .attr('stroke-width', 2)\n        .attr(\n          'd',\n          path(topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectName]))\n        );\n    },\n    [\n      mapData,\n      mapMeta,\n      statistic.total,\n      statistic.maxConfirmed,\n      changeMap,\n      setHoveredRegion,\n    ]\n  );\n\n  const toTitleCase = (str) => {\n    str = str.toLowerCase().split(' ');\n    for (let i = 0; i < str.length; i++) {\n      str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n    }\n    return str.join(' ');\n  };\n\n  const renderData = useCallback(() => {\n    const svg = d3.select(choroplethMap.current);\n\n    // Colorbar\n    const maxInterpolation = 0.8;\n    const color = d3\n      .scaleSequential(d3.interpolateReds)\n      .domain([0, statistic.maxConfirmed / maxInterpolation || 10]);\n\n    let cells = null;\n    let label = null;\n\n    label = ({i, genLength, generatedLabels, labelDelimiter}) => {\n      if (i === genLength - 1) {\n        const n = Math.floor(generatedLabels[i]);\n        return `${n}+`;\n      } else {\n        const n1 = 1 + Math.floor(generatedLabels[i]);\n        const n2 = Math.floor(generatedLabels[i + 1]);\n        return `${n1} - ${n2}`;\n      }\n    };\n\n    const numCells = 6;\n    const delta = Math.floor(\n      (statistic.maxConfirmed < numCells ? numCells : statistic.maxConfirmed) /\n        (numCells - 1)\n    );\n\n    cells = Array.from(Array(numCells).keys()).map((i) => i * delta);\n\n    svg\n      .append('g')\n      .attr('class', 'legendLinear')\n      .attr('transform', 'translate(1, 335)');\n\n    const legendLinear = legendColor()\n      .shapeWidth(36)\n      .shapeHeight(10)\n      .cells(cells)\n      .titleWidth(3)\n      .labels(label)\n      .title('Confirmed Cases')\n      .orient('vertical')\n      .scale(color);\n\n    svg\n      .select('.legendLinear')\n      .call(legendLinear)\n      .selectAll('text')\n      .style('font-size', '10px');\n  }, [statistic.maxConfirmed]);\n\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n      if (statistic && choroplethMap.current) {\n        ready(data);\n        renderData();\n        setSvgRenderCount((prevCount) => prevCount + 1);\n      }\n    })();\n  }, [mapMeta.geoDataFile, statistic, renderData, ready]);\n\n  const highlightRegionInMap = (name) => {\n    const paths = d3.selectAll('.path-region');\n    paths.classed('map-hover', (d, i, nodes) => {\n      const propertyField =\n        'district' in d.properties\n          ? propertyFieldMap['state']\n          : propertyFieldMap['country'];\n      if (name === d.properties[propertyField]) {\n        nodes[i].parentNode.appendChild(nodes[i]);\n        return true;\n      }\n      return false;\n    });\n  };\n\n  useEffect(() => {\n    highlightRegionInMap(selectedRegion);\n  }, [svgRenderCount, selectedRegion]);\n\n  return (\n    <div className=\"svg-parent\">\n      <svg\n        id=\"chart\"\n        width=\"480\"\n        height=\"450\"\n        viewBox=\"0 0 480 450\"\n        preserveAspectRatio=\"xMidYMid meet\"\n        ref={choroplethMap}\n      ></svg>\n    </div>\n  );\n}\n\nexport default ChoroplethMap;\n"]},"metadata":{},"sourceType":"module"}