{"ast":null,"code":"var _jsxFileName = \"/Users/s0g03gv/Documents/I_love_Appy/covid19india-react/src/components/mapexplorer.js\";\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport ChoroplethMap from './choropleth';\nimport { MAP_TYPES, MAPS_DIR } from '../constants';\nimport { formatDate, formatDateAbsolute } from '../utils/common-functions';\nimport { formatDistance } from 'date-fns';\nconst mapMeta = {\n  India: {\n    name: 'India',\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n    graphObjectName: 'india'\n  },\n  'Andaman and Nicobar Islands': {\n    name: 'Andaman and Nicobar Islands',\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andamannicobarislands_district'\n  },\n  'Arunachal Pradesh': {\n    name: 'Arunachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'arunachalpradesh_district'\n  },\n  'Andhra Pradesh': {\n    name: 'Andhra Pradesh',\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andhrapradesh_district'\n  },\n  Assam: {\n    name: 'Assam',\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'assam_district'\n  },\n  Bihar: {\n    name: 'Bihar',\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'bihar_district'\n  },\n  Chhattisgarh: {\n    name: 'Chhattisgarh',\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'chhattisgarh_district'\n  },\n  Delhi: {\n    name: 'Delhi',\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'delhi_district'\n  },\n  Karnataka: {\n    name: 'Karnataka',\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'karnataka_district'\n  },\n  Kerala: {\n    name: 'Kerala',\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'kerala_district'\n  },\n  Goa: {\n    name: 'Goa',\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'goa_district'\n  },\n  Gujarat: {\n    name: 'Gujarat',\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'gujarat_district'\n  },\n  Haryana: {\n    name: 'Haryana',\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'haryana_district'\n  },\n  'Himachal Pradesh': {\n    name: 'Himachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'himachalpradesh_district'\n  },\n  'Jammu and Kashmir': {\n    name: 'Jammu and Kashmir',\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jammukashmir_district'\n  },\n  Jharkhand: {\n    name: 'Jharkhand',\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jharkhand_district'\n  },\n  Ladakh: {\n    name: 'Ladakh',\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'ladakh_district'\n  },\n  'Madhya Pradesh': {\n    name: 'Madhya Pradesh',\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'madhyapradesh_district'\n  },\n  Maharashtra: {\n    name: 'Maharashtra',\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'maharashtra_district'\n  },\n  Manipur: {\n    name: 'Manipur',\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'manipur_district'\n  },\n  Meghalaya: {\n    name: 'Meghalaya',\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'meghalaya_district'\n  },\n  Mizoram: {\n    name: 'Mizoram',\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'mizoram_district'\n  },\n  Nagaland: {\n    name: 'Nagaland',\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'nagaland_district'\n  },\n  Odisha: {\n    name: 'Odisha',\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'odisha_district'\n  },\n  Punjab: {\n    name: 'Punjab',\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'punjab_district'\n  },\n  Rajasthan: {\n    name: 'Rajasthan',\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'rajasthan_district'\n  },\n  Sikkim: {\n    name: 'Sikkim',\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'sikkim_district'\n  },\n  'Tamil Nadu': {\n    name: 'Tamil Nadu',\n    geoDataFile: `${MAPS_DIR}/tamil-nadu.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tamilnadu_district'\n  },\n  Telangana: {\n    name: 'Telangana',\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'telangana_district'\n  },\n  Tripura: {\n    name: 'Tripura',\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tripura_district'\n  },\n  Uttarakhand: {\n    name: 'Uttarakhand',\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarakhand_district'\n  },\n  'Uttar Pradesh': {\n    name: 'Uttar Pradesh',\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarpradesh_district'\n  },\n  'West Bengal': {\n    name: 'West Bengal',\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'westbengal_district'\n  }\n};\nexport default function ({\n  states,\n  stateDistrictWiseData,\n  regionHighlighted\n}) {\n  const [selectedRegion, setSelectedRegion] = useState({});\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta.India);\n  useEffect(() => {\n    const region = getRegionFromState(states[1]);\n    setCurrentHoveredRegion(region);\n  }, [states]);\n\n  if (!currentHoveredRegion) {\n    return null;\n  }\n\n  const [statistic, currentMapData] = useMemo(() => {\n    const statistic = {\n      total: 0,\n      maxConfirmed: 0\n    };\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n\n        const confirmed = parseInt(state.confirmed);\n        statistic.total += confirmed;\n\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n\n        acc[state.state] = state.confirmed;\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (stateDistrictWiseData[currentMap.name] || {\n        districtData: {}\n      }).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        const confirmed = parseInt(districtWiseData[district].confirmed);\n        statistic.total += confirmed;\n\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n\n        acc[district] = districtWiseData[district].confirmed;\n        return acc;\n      }, {});\n    }\n\n    return [statistic, currentMapData];\n  }, [currentMap, states, stateDistrictWiseData]);\n  const setHoveredRegion = useCallback((name, currentMap) => {\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      setCurrentHoveredRegion(getRegionFromState(states.filter(state => name === state.state)[0]));\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const state = stateDistrictWiseData[currentMap.name] || {\n        districtData: {}\n      };\n      let districtData = state.districtData[name];\n\n      if (!districtData) {\n        districtData = {\n          confirmed: 0,\n          active: 0,\n          deaths: 0,\n          recovered: 0\n        };\n      }\n\n      setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\n    }\n  }, [stateDistrictWiseData, states]);\n  useEffect(() => {\n    if (regionHighlighted === undefined) {\n      return;\n    } else if (regionHighlighted === null) {\n      setSelectedRegion(null);\n      return;\n    }\n\n    const isState = !('district' in regionHighlighted);\n\n    if (isState) {\n      const newMap = mapMeta['India'];\n      setCurrentMap(newMap);\n      const region = getRegionFromState(regionHighlighted.state);\n      setCurrentHoveredRegion(region);\n      setSelectedRegion(region.name);\n    } else {\n      const newMap = mapMeta[regionHighlighted.state.state];\n\n      if (!newMap) {\n        return;\n      }\n\n      setCurrentMap(newMap);\n      setHoveredRegion(regionHighlighted.district, newMap);\n      setSelectedRegion(regionHighlighted.district);\n    }\n  }, [regionHighlighted, currentMap.mapType, setHoveredRegion]);\n\n  const getRegionFromDistrict = (districtData, name) => {\n    if (!districtData) {\n      return;\n    }\n\n    const region = { ...districtData\n    };\n\n    if (!region.name) {\n      region.name = name;\n    }\n\n    return region;\n  };\n\n  const getRegionFromState = state => {\n    if (!state) {\n      return;\n    }\n\n    const region = { ...state\n    };\n\n    if (!region.name) {\n      region.name = region.state;\n    }\n\n    return region;\n  };\n\n  const switchMapToState = useCallback(name => {\n    const newMap = mapMeta[name];\n\n    if (!newMap) {\n      return;\n    }\n\n    setCurrentMap(newMap);\n\n    if (newMap.mapType === MAP_TYPES.COUNTRY) {\n      setHoveredRegion(states[1].state, newMap);\n    } else if (newMap.mapType === MAP_TYPES.STATE) {\n      const districtData = (stateDistrictWiseData[name] || {\n        districtData: {}\n      }).districtData;\n      const topDistrict = Object.keys(districtData).filter(name => name !== 'Unknown').sort((a, b) => {\n        return districtData[b].confirmed - districtData[a].confirmed;\n      })[0];\n      setHoveredRegion(topDistrict, newMap);\n    }\n  }, [setHoveredRegion, stateDistrictWiseData, states]);\n  const {\n    name,\n    lastupdatedtime\n  } = currentHoveredRegion;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"MapExplorer fadeInUp\",\n    style: {\n      animationDelay: '1.2s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }\n  }, currentMap.name), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }\n  }, window.innerWidth <= 769 ? 'Tap' : 'Hover', \" over a\", ' ', currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/ut' : 'district', ' ', \"for more details\"), window.innerWidth <= 769 && /*#__PURE__*/React.createElement(\"h6\", {\n    style: {\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontWeight: 900,\n      color: '#fff',\n      background: '#000',\n      padding: '0.25rem',\n      borderRadius: '2.5px',\n      marginRight: '0.25rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }\n  }, \"Update!\"), ' ', \"Tap twice on states to view districts!\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 11\n    }\n  }, \"Confirmed\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, currentHoveredRegion.confirmed), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats is-blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 11\n    }\n  }, \"Active\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }\n  }, currentHoveredRegion.active || ''), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats is-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, \"Recovered\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }, currentHoveredRegion.recovered || ''), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats is-gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 11\n    }\n  }, \"Deceased\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stats-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }\n  }, currentHoveredRegion.deaths || ''), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"meta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 9\n    }\n  }, name), lastupdatedtime && /*#__PURE__*/React.createElement(\"div\", {\n    className: `last-update ${currentMap.mapType === MAP_TYPES.STATE ? 'district-last-update' : 'state-last-update'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }\n  }, \"Last Updated\"), /*#__PURE__*/React.createElement(\"h3\", {\n    title: isNaN(Date.parse(formatDate(lastupdatedtime))) ? '' : formatDateAbsolute(lastupdatedtime),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }\n  }, isNaN(Date.parse(formatDate(lastupdatedtime))) ? '' : formatDistance(new Date(formatDate(lastupdatedtime)), new Date()) + ' Ago')), currentMap.mapType === MAP_TYPES.STATE && currentMapData.Unknown > 0 ? /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"unknown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 11\n    }\n  }, \"Districts unknown for \", currentMapData.Unknown, \" people\") : null, currentMap.mapType === MAP_TYPES.STATE ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button back-button\",\n    onClick: () => switchMapToState('India'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 11\n    }\n  }, \"Back\") : null), /*#__PURE__*/React.createElement(ChoroplethMap, {\n    statistic: statistic,\n    mapMeta: currentMap,\n    mapData: currentMapData,\n    setHoveredRegion: setHoveredRegion,\n    changeMap: switchMapToState,\n    selectedRegion: selectedRegion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/s0g03gv/Documents/I_love_Appy/covid19india-react/src/components/mapexplorer.js"],"names":["React","useState","useEffect","useMemo","useCallback","ChoroplethMap","MAP_TYPES","MAPS_DIR","formatDate","formatDateAbsolute","formatDistance","mapMeta","India","name","geoDataFile","mapType","COUNTRY","graphObjectName","STATE","Assam","Bihar","Chhattisgarh","Delhi","Karnataka","Kerala","Goa","Gujarat","Haryana","Jharkhand","Ladakh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","states","stateDistrictWiseData","regionHighlighted","selectedRegion","setSelectedRegion","currentHoveredRegion","setCurrentHoveredRegion","currentMap","setCurrentMap","region","getRegionFromState","statistic","currentMapData","total","maxConfirmed","reduce","acc","state","confirmed","parseInt","districtWiseData","districtData","Object","keys","district","setHoveredRegion","filter","active","deaths","recovered","getRegionFromDistrict","undefined","isState","newMap","switchMapToState","topDistrict","sort","a","b","lastupdatedtime","animationDelay","window","innerWidth","marginTop","fontWeight","color","background","padding","borderRadius","marginRight","isNaN","Date","parse","Unknown"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,OAApC,EAA6CC,WAA7C,QAA+D,OAA/D;AACA,OAAOC,aAAP,MAA0B,cAA1B;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,cAAlC;AACA,SAAQC,UAAR,EAAoBC,kBAApB,QAA6C,2BAA7C;AACA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,WAAW,EAAG,GAAEP,QAAS,aAFpB;AAGLQ,IAAAA,OAAO,EAAET,SAAS,CAACU,OAHd;AAILC,IAAAA,eAAe,EAAE;AAJZ,GADO;AAOd,iCAA+B;AAC7BJ,IAAAA,IAAI,EAAE,6BADuB;AAE7BC,IAAAA,WAAW,EAAG,GAAEP,QAAS,6BAFI;AAG7BQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHU;AAI7BD,IAAAA,eAAe,EAAE;AAJY,GAPjB;AAad,uBAAqB;AACnBJ,IAAAA,IAAI,EAAE,mBADa;AAEnBC,IAAAA,WAAW,EAAG,GAAEP,QAAS,wBAFN;AAGnBQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHA;AAInBD,IAAAA,eAAe,EAAE;AAJE,GAbP;AAmBd,oBAAkB;AAChBJ,IAAAA,IAAI,EAAE,gBADU;AAEhBC,IAAAA,WAAW,EAAG,GAAEP,QAAS,qBAFT;AAGhBQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHH;AAIhBD,IAAAA,eAAe,EAAE;AAJD,GAnBJ;AA0BdE,EAAAA,KAAK,EAAE;AACLN,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,WAAW,EAAG,GAAEP,QAAS,aAFpB;AAGLQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHd;AAILD,IAAAA,eAAe,EAAE;AAJZ,GA1BO;AAgCdG,EAAAA,KAAK,EAAE;AACLP,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,WAAW,EAAG,GAAEP,QAAS,aAFpB;AAGLQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHd;AAILD,IAAAA,eAAe,EAAE;AAJZ,GAhCO;AAsCdI,EAAAA,YAAY,EAAE;AACZR,IAAAA,IAAI,EAAE,cADM;AAEZC,IAAAA,WAAW,EAAG,GAAEP,QAAS,oBAFb;AAGZQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHP;AAIZD,IAAAA,eAAe,EAAE;AAJL,GAtCA;AA4CdK,EAAAA,KAAK,EAAE;AACLT,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,WAAW,EAAG,GAAEP,QAAS,aAFpB;AAGLQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHd;AAILD,IAAAA,eAAe,EAAE;AAJZ,GA5CO;AAkDdM,EAAAA,SAAS,EAAE;AACTV,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,WAAW,EAAG,GAAEP,QAAS,iBAFhB;AAGTQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHV;AAITD,IAAAA,eAAe,EAAE;AAJR,GAlDG;AAwDdO,EAAAA,MAAM,EAAE;AACNX,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,WAAW,EAAG,GAAEP,QAAS,cAFnB;AAGNQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHb;AAIND,IAAAA,eAAe,EAAE;AAJX,GAxDM;AA8DdQ,EAAAA,GAAG,EAAE;AACHZ,IAAAA,IAAI,EAAE,KADH;AAEHC,IAAAA,WAAW,EAAG,GAAEP,QAAS,WAFtB;AAGHQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHhB;AAIHD,IAAAA,eAAe,EAAE;AAJd,GA9DS;AAoEdS,EAAAA,OAAO,EAAE;AACPb,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,WAAW,EAAG,GAAEP,QAAS,eAFlB;AAGPQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHZ;AAIPD,IAAAA,eAAe,EAAE;AAJV,GApEK;AA0EdU,EAAAA,OAAO,EAAE;AACPd,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,WAAW,EAAG,GAAEP,QAAS,eAFlB;AAGPQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHZ;AAIPD,IAAAA,eAAe,EAAE;AAJV,GA1EK;AAgFd,sBAAoB;AAClBJ,IAAAA,IAAI,EAAE,kBADY;AAElBC,IAAAA,WAAW,EAAG,GAAEP,QAAS,uBAFP;AAGlBQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHD;AAIlBD,IAAAA,eAAe,EAAE;AAJC,GAhFN;AAsFd,uBAAqB;AACnBJ,IAAAA,IAAI,EAAE,mBADa;AAEnBC,IAAAA,WAAW,EAAG,GAAEP,QAAS,oBAFN;AAGnBQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHA;AAInBD,IAAAA,eAAe,EAAE;AAJE,GAtFP;AA4FdW,EAAAA,SAAS,EAAE;AACTf,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,WAAW,EAAG,GAAEP,QAAS,iBAFhB;AAGTQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHV;AAITD,IAAAA,eAAe,EAAE;AAJR,GA5FG;AAkGdY,EAAAA,MAAM,EAAE;AACNhB,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,WAAW,EAAG,GAAEP,QAAS,cAFnB;AAGNQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHb;AAIND,IAAAA,eAAe,EAAE;AAJX,GAlGM;AAwGd,oBAAkB;AAChBJ,IAAAA,IAAI,EAAE,gBADU;AAEhBC,IAAAA,WAAW,EAAG,GAAEP,QAAS,qBAFT;AAGhBQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHH;AAIhBD,IAAAA,eAAe,EAAE;AAJD,GAxGJ;AA8Gda,EAAAA,WAAW,EAAE;AACXjB,IAAAA,IAAI,EAAE,aADK;AAEXC,IAAAA,WAAW,EAAG,GAAEP,QAAS,mBAFd;AAGXQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHR;AAIXD,IAAAA,eAAe,EAAE;AAJN,GA9GC;AAoHdc,EAAAA,OAAO,EAAE;AACPlB,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,WAAW,EAAG,GAAEP,QAAS,eAFlB;AAGPQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHZ;AAIPD,IAAAA,eAAe,EAAE;AAJV,GApHK;AA0Hde,EAAAA,SAAS,EAAE;AACTnB,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,WAAW,EAAG,GAAEP,QAAS,iBAFhB;AAGTQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHV;AAITD,IAAAA,eAAe,EAAE;AAJR,GA1HG;AAgIdgB,EAAAA,OAAO,EAAE;AACPpB,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,WAAW,EAAG,GAAEP,QAAS,eAFlB;AAGPQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHZ;AAIPD,IAAAA,eAAe,EAAE;AAJV,GAhIK;AAsIdiB,EAAAA,QAAQ,EAAE;AACRrB,IAAAA,IAAI,EAAE,UADE;AAERC,IAAAA,WAAW,EAAG,GAAEP,QAAS,gBAFjB;AAGRQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHX;AAIRD,IAAAA,eAAe,EAAE;AAJT,GAtII;AA4IdkB,EAAAA,MAAM,EAAE;AACNtB,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,WAAW,EAAG,GAAEP,QAAS,cAFnB;AAGNQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHb;AAIND,IAAAA,eAAe,EAAE;AAJX,GA5IM;AAkJdmB,EAAAA,MAAM,EAAE;AACNvB,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,WAAW,EAAG,GAAEP,QAAS,cAFnB;AAGNQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHb;AAIND,IAAAA,eAAe,EAAE;AAJX,GAlJM;AAwJdoB,EAAAA,SAAS,EAAE;AACTxB,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,WAAW,EAAG,GAAEP,QAAS,iBAFhB;AAGTQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHV;AAITD,IAAAA,eAAe,EAAE;AAJR,GAxJG;AA8JdqB,EAAAA,MAAM,EAAE;AACNzB,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,WAAW,EAAG,GAAEP,QAAS,cAFnB;AAGNQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHb;AAIND,IAAAA,eAAe,EAAE;AAJX,GA9JM;AAoKd,gBAAc;AACZJ,IAAAA,IAAI,EAAE,YADM;AAEZC,IAAAA,WAAW,EAAG,GAAEP,QAAS,kBAFb;AAGZQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHP;AAIZD,IAAAA,eAAe,EAAE;AAJL,GApKA;AA0KdsB,EAAAA,SAAS,EAAE;AACT1B,IAAAA,IAAI,EAAE,WADG;AAETC,IAAAA,WAAW,EAAG,GAAEP,QAAS,iBAFhB;AAGTQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHV;AAITD,IAAAA,eAAe,EAAE;AAJR,GA1KG;AAgLduB,EAAAA,OAAO,EAAE;AACP3B,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,WAAW,EAAG,GAAEP,QAAS,eAFlB;AAGPQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHZ;AAIPD,IAAAA,eAAe,EAAE;AAJV,GAhLK;AAsLdwB,EAAAA,WAAW,EAAE;AACX5B,IAAAA,IAAI,EAAE,aADK;AAEXC,IAAAA,WAAW,EAAG,GAAEP,QAAS,mBAFd;AAGXQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHR;AAIXD,IAAAA,eAAe,EAAE;AAJN,GAtLC;AA4Ld,mBAAiB;AACfJ,IAAAA,IAAI,EAAE,eADS;AAEfC,IAAAA,WAAW,EAAG,GAAEP,QAAS,oBAFV;AAGfQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHJ;AAIfD,IAAAA,eAAe,EAAE;AAJF,GA5LH;AAmMd,iBAAe;AACbJ,IAAAA,IAAI,EAAE,aADO;AAEbC,IAAAA,WAAW,EAAG,GAAEP,QAAS,kBAFZ;AAGbQ,IAAAA,OAAO,EAAET,SAAS,CAACY,KAHN;AAIbD,IAAAA,eAAe,EAAE;AAJJ;AAnMD,CAAhB;AA2MA,eAAe,UAAU;AAACyB,EAAAA,MAAD;AAASC,EAAAA,qBAAT;AAAgCC,EAAAA;AAAhC,CAAV,EAA8D;AAC3E,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC7C,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAAC8C,oBAAD,EAAuBC,uBAAvB,IAAkD/C,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAACgD,UAAD,EAAaC,aAAb,IAA8BjD,QAAQ,CAACU,OAAO,CAACC,KAAT,CAA5C;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiD,MAAM,GAAGC,kBAAkB,CAACV,MAAM,CAAC,CAAD,CAAP,CAAjC;AACAM,IAAAA,uBAAuB,CAACG,MAAD,CAAvB;AACD,GAHQ,EAGN,CAACT,MAAD,CAHM,CAAT;;AAKA,MAAI,CAACK,oBAAL,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,QAAM,CAACM,SAAD,EAAYC,cAAZ,IAA8BnD,OAAO,CAAC,MAAM;AAChD,UAAMkD,SAAS,GAAG;AAACE,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,YAAY,EAAE;AAAzB,KAAlB;AACA,QAAIF,cAAc,GAAG,EAArB;;AAEA,QAAIL,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACU,OAArC,EAA8C;AAC5CsC,MAAAA,cAAc,GAAGZ,MAAM,CAACe,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC7C,YAAIA,KAAK,CAACA,KAAN,KAAgB,OAApB,EAA6B;AAC3B,iBAAOD,GAAP;AACD;;AACD,cAAME,SAAS,GAAGC,QAAQ,CAACF,KAAK,CAACC,SAAP,CAA1B;AACAP,QAAAA,SAAS,CAACE,KAAV,IAAmBK,SAAnB;;AACA,YAAIA,SAAS,GAAGP,SAAS,CAACG,YAA1B,EAAwC;AACtCH,UAAAA,SAAS,CAACG,YAAV,GAAyBI,SAAzB;AACD;;AAEDF,QAAAA,GAAG,CAACC,KAAK,CAACA,KAAP,CAAH,GAAmBA,KAAK,CAACC,SAAzB;AACA,eAAOF,GAAP;AACD,OAZgB,EAYd,EAZc,CAAjB;AAaD,KAdD,MAcO,IAAIT,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACY,KAArC,EAA4C;AACjD,YAAM4C,gBAAgB,GAAG,CACvBnB,qBAAqB,CAACM,UAAU,CAACpC,IAAZ,CAArB,IAA0C;AAACkD,QAAAA,YAAY,EAAE;AAAf,OADnB,EAEvBA,YAFF;AAGAT,MAAAA,cAAc,GAAGU,MAAM,CAACC,IAAP,CAAYH,gBAAZ,EAA8BL,MAA9B,CAAqC,CAACC,GAAD,EAAMQ,QAAN,KAAmB;AACvE,cAAMN,SAAS,GAAGC,QAAQ,CAACC,gBAAgB,CAACI,QAAD,CAAhB,CAA2BN,SAA5B,CAA1B;AACAP,QAAAA,SAAS,CAACE,KAAV,IAAmBK,SAAnB;;AACA,YAAIA,SAAS,GAAGP,SAAS,CAACG,YAA1B,EAAwC;AACtCH,UAAAA,SAAS,CAACG,YAAV,GAAyBI,SAAzB;AACD;;AACDF,QAAAA,GAAG,CAACQ,QAAD,CAAH,GAAgBJ,gBAAgB,CAACI,QAAD,CAAhB,CAA2BN,SAA3C;AACA,eAAOF,GAAP;AACD,OARgB,EAQd,EARc,CAAjB;AASD;;AACD,WAAO,CAACL,SAAD,EAAYC,cAAZ,CAAP;AACD,GAjC0C,EAiCxC,CAACL,UAAD,EAAaP,MAAb,EAAqBC,qBAArB,CAjCwC,CAA3C;AAmCA,QAAMwB,gBAAgB,GAAG/D,WAAW,CAClC,CAACS,IAAD,EAAOoC,UAAP,KAAsB;AACpB,QAAIA,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACU,OAArC,EAA8C;AAC5CgC,MAAAA,uBAAuB,CACrBI,kBAAkB,CAACV,MAAM,CAAC0B,MAAP,CAAeT,KAAD,IAAW9C,IAAI,KAAK8C,KAAK,CAACA,KAAxC,EAA+C,CAA/C,CAAD,CADG,CAAvB;AAGD,KAJD,MAIO,IAAIV,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACY,KAArC,EAA4C;AACjD,YAAMyC,KAAK,GAAGhB,qBAAqB,CAACM,UAAU,CAACpC,IAAZ,CAArB,IAA0C;AACtDkD,QAAAA,YAAY,EAAE;AADwC,OAAxD;AAGA,UAAIA,YAAY,GAAGJ,KAAK,CAACI,YAAN,CAAmBlD,IAAnB,CAAnB;;AACA,UAAI,CAACkD,YAAL,EAAmB;AACjBA,QAAAA,YAAY,GAAG;AACbH,UAAAA,SAAS,EAAE,CADE;AAEbS,UAAAA,MAAM,EAAE,CAFK;AAGbC,UAAAA,MAAM,EAAE,CAHK;AAIbC,UAAAA,SAAS,EAAE;AAJE,SAAf;AAMD;;AACDvB,MAAAA,uBAAuB,CAACwB,qBAAqB,CAACT,YAAD,EAAelD,IAAf,CAAtB,CAAvB;AACD;AACF,GArBiC,EAsBlC,CAAC8B,qBAAD,EAAwBD,MAAxB,CAtBkC,CAApC;AAyBAxC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0C,iBAAiB,KAAK6B,SAA1B,EAAqC;AACnC;AACD,KAFD,MAEO,IAAI7B,iBAAiB,KAAK,IAA1B,EAAgC;AACrCE,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA;AACD;;AACD,UAAM4B,OAAO,GAAG,EAAE,cAAc9B,iBAAhB,CAAhB;;AACA,QAAI8B,OAAJ,EAAa;AACX,YAAMC,MAAM,GAAGhE,OAAO,CAAC,OAAD,CAAtB;AACAuC,MAAAA,aAAa,CAACyB,MAAD,CAAb;AACA,YAAMxB,MAAM,GAAGC,kBAAkB,CAACR,iBAAiB,CAACe,KAAnB,CAAjC;AACAX,MAAAA,uBAAuB,CAACG,MAAD,CAAvB;AACAL,MAAAA,iBAAiB,CAACK,MAAM,CAACtC,IAAR,CAAjB;AACD,KAND,MAMO;AACL,YAAM8D,MAAM,GAAGhE,OAAO,CAACiC,iBAAiB,CAACe,KAAlB,CAAwBA,KAAzB,CAAtB;;AACA,UAAI,CAACgB,MAAL,EAAa;AACX;AACD;;AACDzB,MAAAA,aAAa,CAACyB,MAAD,CAAb;AACAR,MAAAA,gBAAgB,CAACvB,iBAAiB,CAACsB,QAAnB,EAA6BS,MAA7B,CAAhB;AACA7B,MAAAA,iBAAiB,CAACF,iBAAiB,CAACsB,QAAnB,CAAjB;AACD;AACF,GAvBQ,EAuBN,CAACtB,iBAAD,EAAoBK,UAAU,CAAClC,OAA/B,EAAwCoD,gBAAxC,CAvBM,CAAT;;AAyBA,QAAMK,qBAAqB,GAAG,CAACT,YAAD,EAAelD,IAAf,KAAwB;AACpD,QAAI,CAACkD,YAAL,EAAmB;AACjB;AACD;;AACD,UAAMZ,MAAM,GAAG,EAAC,GAAGY;AAAJ,KAAf;;AACA,QAAI,CAACZ,MAAM,CAACtC,IAAZ,EAAkB;AAChBsC,MAAAA,MAAM,CAACtC,IAAP,GAAcA,IAAd;AACD;;AACD,WAAOsC,MAAP;AACD,GATD;;AAWA,QAAMC,kBAAkB,GAAIO,KAAD,IAAW;AACpC,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AACD,UAAMR,MAAM,GAAG,EAAC,GAAGQ;AAAJ,KAAf;;AACA,QAAI,CAACR,MAAM,CAACtC,IAAZ,EAAkB;AAChBsC,MAAAA,MAAM,CAACtC,IAAP,GAAcsC,MAAM,CAACQ,KAArB;AACD;;AACD,WAAOR,MAAP;AACD,GATD;;AAWA,QAAMyB,gBAAgB,GAAGxE,WAAW,CACjCS,IAAD,IAAU;AACR,UAAM8D,MAAM,GAAGhE,OAAO,CAACE,IAAD,CAAtB;;AACA,QAAI,CAAC8D,MAAL,EAAa;AACX;AACD;;AACDzB,IAAAA,aAAa,CAACyB,MAAD,CAAb;;AACA,QAAIA,MAAM,CAAC5D,OAAP,KAAmBT,SAAS,CAACU,OAAjC,EAA0C;AACxCmD,MAAAA,gBAAgB,CAACzB,MAAM,CAAC,CAAD,CAAN,CAAUiB,KAAX,EAAkBgB,MAAlB,CAAhB;AACD,KAFD,MAEO,IAAIA,MAAM,CAAC5D,OAAP,KAAmBT,SAAS,CAACY,KAAjC,EAAwC;AAC7C,YAAM6C,YAAY,GAAG,CAACpB,qBAAqB,CAAC9B,IAAD,CAArB,IAA+B;AAACkD,QAAAA,YAAY,EAAE;AAAf,OAAhC,EAClBA,YADH;AAEA,YAAMc,WAAW,GAAGb,MAAM,CAACC,IAAP,CAAYF,YAAZ,EACjBK,MADiB,CACTvD,IAAD,IAAUA,IAAI,KAAK,SADT,EAEjBiE,IAFiB,CAEZ,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,eAAOjB,YAAY,CAACiB,CAAD,CAAZ,CAAgBpB,SAAhB,GAA4BG,YAAY,CAACgB,CAAD,CAAZ,CAAgBnB,SAAnD;AACD,OAJiB,EAIf,CAJe,CAApB;AAKAO,MAAAA,gBAAgB,CAACU,WAAD,EAAcF,MAAd,CAAhB;AACD;AACF,GAnBiC,EAoBlC,CAACR,gBAAD,EAAmBxB,qBAAnB,EAA0CD,MAA1C,CApBkC,CAApC;AAsBA,QAAM;AAAC7B,IAAAA,IAAD;AAAOoE,IAAAA;AAAP,MAA0BlC,oBAAhC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,KAAK,EAAE;AAACmC,MAAAA,cAAc,EAAE;AAAjB,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKjC,UAAU,CAACpC,IAAhB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsE,MAAM,CAACC,UAAP,IAAqB,GAArB,GAA2B,KAA3B,GAAmC,OADtC,aACsD,GADtD,EAEGnC,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACU,OAAjC,GAA2C,UAA3C,GAAwD,UAF3D,EAEuE,GAFvE,qBAFF,EAOGmE,MAAM,CAACC,UAAP,IAAqB,GAArB,iBACC;AAAI,IAAA,KAAK,EAAE;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,GADP;AAELC,MAAAA,KAAK,EAAE,MAFF;AAGLC,MAAAA,UAAU,EAAE,MAHP;AAILC,MAAAA,OAAO,EAAE,SAJJ;AAKLC,MAAAA,YAAY,EAAE,OALT;AAMLC,MAAAA,WAAW,EAAE;AANR,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAYU,GAZV,2CARJ,CADF,eA2BE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK5C,oBAAoB,CAACa,SAA1B,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CADF,eASE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKb,oBAAoB,CAACsB,MAArB,IAA+B,EAApC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CATF,eAiBE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKtB,oBAAoB,CAACwB,SAArB,IAAkC,EAAvC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CAjBF,eAyBE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKxB,oBAAoB,CAACuB,MAArB,IAA+B,EAApC,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CAzBF,CA3BF,eA6DE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKzD,IAAL,CADF,EAEGoE,eAAe,iBACd;AACE,IAAA,SAAS,EAAG,eACVhC,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACY,KAAjC,GACI,sBADJ,GAEI,mBACL,EALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE;AACE,IAAA,KAAK,EACH0E,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWtF,UAAU,CAACyE,eAAD,CAArB,CAAD,CAAL,GACI,EADJ,GAEIxE,kBAAkB,CAACwE,eAAD,CAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGW,KAAK,CAACC,IAAI,CAACC,KAAL,CAAWtF,UAAU,CAACyE,eAAD,CAArB,CAAD,CAAL,GACG,EADH,GAEGvE,cAAc,CACZ,IAAImF,IAAJ,CAASrF,UAAU,CAACyE,eAAD,CAAnB,CADY,EAEZ,IAAIY,IAAJ,EAFY,CAAd,GAGI,MAZV,CARF,CAHJ,EA4BG5C,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACY,KAAjC,IACDoC,cAAc,CAACyC,OAAf,GAAyB,CADxB,gBAEC;AAAI,IAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACyBzC,cAAc,CAACyC,OADxC,YAFD,GAKG,IAjCN,EAmCG9C,UAAU,CAAClC,OAAX,KAAuBT,SAAS,CAACY,KAAjC,gBACC;AACE,IAAA,SAAS,EAAC,oBADZ;AAEE,IAAA,OAAO,EAAE,MAAM0D,gBAAgB,CAAC,OAAD,CAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAOG,IA1CN,CA7DF,eA0GE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAEvB,SADb;AAEE,IAAA,OAAO,EAAEJ,UAFX;AAGE,IAAA,OAAO,EAAEK,cAHX;AAIE,IAAA,gBAAgB,EAAEa,gBAJpB;AAKE,IAAA,SAAS,EAAES,gBALb;AAME,IAAA,cAAc,EAAE/B,cANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1GF,CADF;AAqHD","sourcesContent":["import React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport ChoroplethMap from './choropleth';\nimport {MAP_TYPES, MAPS_DIR} from '../constants';\nimport {formatDate, formatDateAbsolute} from '../utils/common-functions';\nimport {formatDistance} from 'date-fns';\n\nconst mapMeta = {\n  India: {\n    name: 'India',\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n    graphObjectName: 'india',\n  },\n  'Andaman and Nicobar Islands': {\n    name: 'Andaman and Nicobar Islands',\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andamannicobarislands_district',\n  },\n  'Arunachal Pradesh': {\n    name: 'Arunachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'arunachalpradesh_district',\n  },\n  'Andhra Pradesh': {\n    name: 'Andhra Pradesh',\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'andhrapradesh_district',\n  },\n\n  Assam: {\n    name: 'Assam',\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'assam_district',\n  },\n  Bihar: {\n    name: 'Bihar',\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'bihar_district',\n  },\n  Chhattisgarh: {\n    name: 'Chhattisgarh',\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'chhattisgarh_district',\n  },\n  Delhi: {\n    name: 'Delhi',\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'delhi_district',\n  },\n  Karnataka: {\n    name: 'Karnataka',\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'karnataka_district',\n  },\n  Kerala: {\n    name: 'Kerala',\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'kerala_district',\n  },\n  Goa: {\n    name: 'Goa',\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'goa_district',\n  },\n  Gujarat: {\n    name: 'Gujarat',\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'gujarat_district',\n  },\n  Haryana: {\n    name: 'Haryana',\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'haryana_district',\n  },\n  'Himachal Pradesh': {\n    name: 'Himachal Pradesh',\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'himachalpradesh_district',\n  },\n  'Jammu and Kashmir': {\n    name: 'Jammu and Kashmir',\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jammukashmir_district',\n  },\n  Jharkhand: {\n    name: 'Jharkhand',\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'jharkhand_district',\n  },\n  Ladakh: {\n    name: 'Ladakh',\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'ladakh_district',\n  },\n  'Madhya Pradesh': {\n    name: 'Madhya Pradesh',\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'madhyapradesh_district',\n  },\n  Maharashtra: {\n    name: 'Maharashtra',\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'maharashtra_district',\n  },\n  Manipur: {\n    name: 'Manipur',\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'manipur_district',\n  },\n  Meghalaya: {\n    name: 'Meghalaya',\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'meghalaya_district',\n  },\n  Mizoram: {\n    name: 'Mizoram',\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'mizoram_district',\n  },\n  Nagaland: {\n    name: 'Nagaland',\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'nagaland_district',\n  },\n  Odisha: {\n    name: 'Odisha',\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'odisha_district',\n  },\n  Punjab: {\n    name: 'Punjab',\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'punjab_district',\n  },\n  Rajasthan: {\n    name: 'Rajasthan',\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'rajasthan_district',\n  },\n  Sikkim: {\n    name: 'Sikkim',\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'sikkim_district',\n  },\n  'Tamil Nadu': {\n    name: 'Tamil Nadu',\n    geoDataFile: `${MAPS_DIR}/tamil-nadu.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tamilnadu_district',\n  },\n  Telangana: {\n    name: 'Telangana',\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'telangana_district',\n  },\n  Tripura: {\n    name: 'Tripura',\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'tripura_district',\n  },\n  Uttarakhand: {\n    name: 'Uttarakhand',\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarakhand_district',\n  },\n  'Uttar Pradesh': {\n    name: 'Uttar Pradesh',\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'uttarpradesh_district',\n  },\n\n  'West Bengal': {\n    name: 'West Bengal',\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectName: 'westbengal_district',\n  },\n};\n\nexport default function ({states, stateDistrictWiseData, regionHighlighted}) {\n  const [selectedRegion, setSelectedRegion] = useState({});\n  const [currentHoveredRegion, setCurrentHoveredRegion] = useState({});\n  const [currentMap, setCurrentMap] = useState(mapMeta.India);\n\n  useEffect(() => {\n    const region = getRegionFromState(states[1]);\n    setCurrentHoveredRegion(region);\n  }, [states]);\n\n  if (!currentHoveredRegion) {\n    return null;\n  }\n\n  const [statistic, currentMapData] = useMemo(() => {\n    const statistic = {total: 0, maxConfirmed: 0};\n    let currentMapData = {};\n\n    if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n      currentMapData = states.reduce((acc, state) => {\n        if (state.state === 'Total') {\n          return acc;\n        }\n        const confirmed = parseInt(state.confirmed);\n        statistic.total += confirmed;\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n\n        acc[state.state] = state.confirmed;\n        return acc;\n      }, {});\n    } else if (currentMap.mapType === MAP_TYPES.STATE) {\n      const districtWiseData = (\n        stateDistrictWiseData[currentMap.name] || {districtData: {}}\n      ).districtData;\n      currentMapData = Object.keys(districtWiseData).reduce((acc, district) => {\n        const confirmed = parseInt(districtWiseData[district].confirmed);\n        statistic.total += confirmed;\n        if (confirmed > statistic.maxConfirmed) {\n          statistic.maxConfirmed = confirmed;\n        }\n        acc[district] = districtWiseData[district].confirmed;\n        return acc;\n      }, {});\n    }\n    return [statistic, currentMapData];\n  }, [currentMap, states, stateDistrictWiseData]);\n\n  const setHoveredRegion = useCallback(\n    (name, currentMap) => {\n      if (currentMap.mapType === MAP_TYPES.COUNTRY) {\n        setCurrentHoveredRegion(\n          getRegionFromState(states.filter((state) => name === state.state)[0])\n        );\n      } else if (currentMap.mapType === MAP_TYPES.STATE) {\n        const state = stateDistrictWiseData[currentMap.name] || {\n          districtData: {},\n        };\n        let districtData = state.districtData[name];\n        if (!districtData) {\n          districtData = {\n            confirmed: 0,\n            active: 0,\n            deaths: 0,\n            recovered: 0,\n          };\n        }\n        setCurrentHoveredRegion(getRegionFromDistrict(districtData, name));\n      }\n    },\n    [stateDistrictWiseData, states]\n  );\n\n  useEffect(() => {\n    if (regionHighlighted === undefined) {\n      return;\n    } else if (regionHighlighted === null) {\n      setSelectedRegion(null);\n      return;\n    }\n    const isState = !('district' in regionHighlighted);\n    if (isState) {\n      const newMap = mapMeta['India'];\n      setCurrentMap(newMap);\n      const region = getRegionFromState(regionHighlighted.state);\n      setCurrentHoveredRegion(region);\n      setSelectedRegion(region.name);\n    } else {\n      const newMap = mapMeta[regionHighlighted.state.state];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      setHoveredRegion(regionHighlighted.district, newMap);\n      setSelectedRegion(regionHighlighted.district);\n    }\n  }, [regionHighlighted, currentMap.mapType, setHoveredRegion]);\n\n  const getRegionFromDistrict = (districtData, name) => {\n    if (!districtData) {\n      return;\n    }\n    const region = {...districtData};\n    if (!region.name) {\n      region.name = name;\n    }\n    return region;\n  };\n\n  const getRegionFromState = (state) => {\n    if (!state) {\n      return;\n    }\n    const region = {...state};\n    if (!region.name) {\n      region.name = region.state;\n    }\n    return region;\n  };\n\n  const switchMapToState = useCallback(\n    (name) => {\n      const newMap = mapMeta[name];\n      if (!newMap) {\n        return;\n      }\n      setCurrentMap(newMap);\n      if (newMap.mapType === MAP_TYPES.COUNTRY) {\n        setHoveredRegion(states[1].state, newMap);\n      } else if (newMap.mapType === MAP_TYPES.STATE) {\n        const districtData = (stateDistrictWiseData[name] || {districtData: {}})\n          .districtData;\n        const topDistrict = Object.keys(districtData)\n          .filter((name) => name !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n        setHoveredRegion(topDistrict, newMap);\n      }\n    },\n    [setHoveredRegion, stateDistrictWiseData, states]\n  );\n  const {name, lastupdatedtime} = currentHoveredRegion;\n\n  return (\n    <div className=\"MapExplorer fadeInUp\" style={{animationDelay: '1.2s'}}>\n      <div className=\"header\">\n        <h1>{currentMap.name}</h1>\n        <h6>\n          {window.innerWidth <= 769 ? 'Tap' : 'Hover'} over a{' '}\n          {currentMap.mapType === MAP_TYPES.COUNTRY ? 'state/ut' : 'district'}{' '}\n          for more details\n        </h6>\n        {window.innerWidth <= 769 && (\n          <h6 style={{marginTop: '1rem'}}>\n            <span\n              style={{\n                fontWeight: 900,\n                color: '#fff',\n                background: '#000',\n                padding: '0.25rem',\n                borderRadius: '2.5px',\n                marginRight: '0.25rem',\n              }}\n            >\n              Update!\n            </span>{' '}\n            Tap twice on states to view districts!\n          </h6>\n        )}\n      </div>\n\n      <div className=\"map-stats\">\n        <div className=\"stats\">\n          <h5>Confirmed</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.confirmed}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-blue\">\n          <h5>Active</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.active || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-green\">\n          <h5>Recovered</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.recovered || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n\n        <div className=\"stats is-gray\">\n          <h5>Deceased</h5>\n          <div className=\"stats-bottom\">\n            <h1>{currentHoveredRegion.deaths || ''}</h1>\n            <h6>{}</h6>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"meta\">\n        <h2>{name}</h2>\n        {lastupdatedtime && (\n          <div\n            className={`last-update ${\n              currentMap.mapType === MAP_TYPES.STATE\n                ? 'district-last-update'\n                : 'state-last-update'\n            }`}\n          >\n            <h6>Last Updated</h6>\n            <h3\n              title={\n                isNaN(Date.parse(formatDate(lastupdatedtime)))\n                  ? ''\n                  : formatDateAbsolute(lastupdatedtime)\n              }\n            >\n              {isNaN(Date.parse(formatDate(lastupdatedtime)))\n                ? ''\n                : formatDistance(\n                    new Date(formatDate(lastupdatedtime)),\n                    new Date()\n                  ) + ' Ago'}\n            </h3>\n          </div>\n        )}\n\n        {currentMap.mapType === MAP_TYPES.STATE &&\n        currentMapData.Unknown > 0 ? (\n          <h4 className=\"unknown\">\n            Districts unknown for {currentMapData.Unknown} people\n          </h4>\n        ) : null}\n\n        {currentMap.mapType === MAP_TYPES.STATE ? (\n          <div\n            className=\"button back-button\"\n            onClick={() => switchMapToState('India')}\n          >\n            Back\n          </div>\n        ) : null}\n      </div>\n\n      <ChoroplethMap\n        statistic={statistic}\n        mapMeta={currentMap}\n        mapData={currentMapData}\n        setHoveredRegion={setHoveredRegion}\n        changeMap={switchMapToState}\n        selectedRegion={selectedRegion}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}